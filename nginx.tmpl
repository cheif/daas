worker_processes 1;

error_log /var/log/nginx/error.log warn;
pid       /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    # This is needed to permit websocket to pass through nginx
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    } include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;

    keepalive_timeout 65;

    upstream docker-registry {
        server registry:5000;
    }

    {% for route in routes %}
    # Route for {{ route.alias }}.{{ env.DOMAIN_NAME }}
    server {
        listen 80;
        {% if use_certificates %}
        listen 443 ssl;
        {% endif %}
        {% if not env.DOMAIN_NAME %}
        server_name ~^(www\.)?{{ route.alias }}\.[^.]*$;
        {% else %}
        server_name ~^(www\.)?{{ route.alias }}\.[^.]*\.[^.]*$;
        {% endif %}

        # This is for setting up letsencrypt
        location /.well-known {
            root /var/www/letsencrypt;
        }

        # Docker has a dns-server on 127.0.0.11 (at least right now), but it doesn't do
        # ipv6
        resolver 127.0.0.11 ipv6=off;
        location / {

            {% if route.auth == "password" %}
            # Use password based auth
            auth_basic "{{route.alias}} realm";
            auth_basic_user_file /etc/nginx/conf.d/nginx.htpasswd;
            {% elif route.auth == "oauth2" %}
            # Use oauth2
            auth_request /oauth2/auth;
            error_page 401 = /oauth2/sign_in?rd=$scheme://$host$request_uri;
            {% endif %}

            client_max_body_size 0;
            proxy_set_header HOST $host;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            proxy_pass http://{{ route.alias }}:{{ route.port }};
        }

        {% if route.auth == "oauth2" %}
        location /oauth2/ {
            # Make sure the OAuth2 Proxy knows where the original request came from.
            proxy_set_header Host       $host;
            proxy_set_header X-Real-IP  $remote_addr;
            proxy_set_header X-Scheme  $scheme;
            proxy_set_header X-Auth-Request-Redirect $scheme://$host$request_uri;

            proxy_pass http://{{ route.oauth2_provider }};
        }
        {% endif %}
    }
    {% endfor %}

    {% if env.DOMAIN_NAME and use_certificates %}
    # No ssl or registry if we don't have a domain-name
    ssl_certificate /etc/letsencrypt/live/{{env.DOMAIN_NAME}}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{env.DOMAIN_NAME}}/privkey.pem;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_dhparam /etc/letsencrypt/dhparam.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";


    map $upstream_http_docker_distribution_api_version $docker_distribution_api_version {
      'registry/2.0' '';
      default registry/2.0;
    }

    server {
        listen 443 ssl;
        server_name ~^(www\.)?{{env.DOMAIN_NAME}};

        location / {
            # Default to the www-container
            proxy_pass http://www:8080/$uri$is_args$args;
        }

        # Docker registry
        location /v2/ {
            auth_basic "Registry realm";
            auth_basic_user_file /etc/nginx/conf.d/nginx.htpasswd;
            client_max_body_size 0;

            add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;
            proxy_pass http://docker-registry;
        }
    }
    {% endif %}
}
